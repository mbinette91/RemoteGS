{
  "name": "mysql2",
  "version": "0.8.21",
  "description": "fast mysql driver. Implements core protocol, prepared statements, ssl and compression in native JS",
  "main": "index.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "./test/run.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sidorares/node-mysql2"
  },
  "keywords": [
    "mysql",
    "client",
    "server"
  ],
  "author": {
    "name": "Andrey Sidorov",
    "email": "sidorares@yandex.ru"
  },
  "license": "MIT",
  "dependencies": {
    "fastqueue": "~0.1.0"
  },
  "devDependencies": {
    "urun": "0.0.6"
  },
  "readme": "#node-mysql2\n\n[![Build Status](https://secure.travis-ci.org/sidorares/node-mysql2.png)](http://travis-ci.org/sidorares/node-mysql2) [![](https://gemnasium.com/sidorares/node-mysql2.png)](https://gemnasium.com/npms/mysql2) [TODO](https://github.com/cainus/node-coveralls): [![](https://coveralls.io/repos/sidorares/node-mysql2/badge.png)](https://coveralls.io/r/sidorares/node-mysql2)\n\n\nMysql client for node.js. Written in native JavaScript and aims to be mostly api compatible with [node-mysql](https://github.com/felixge/node-mysql)\n\n[![NPM](http://nodei.co/npm/mysql2.png)](http://nodei.co/npm/mysql2/)\n\n## Features\n\n In addition to client-side query/escape and connection pooling\n\n  - MySQL server API for proxies and mocks\n  - SSL and compression\n  - prepared statements\n\n## Documentation\n\nSee [node-mysql](https://github.com/felixge/node-mysql) documentation. If you see api incompatibilities, please report via github issue.\n\n## Examples\n\nSimple select:\n\n```js\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({ user: 'test', database: 'test'});\n\nconnection.query('SELECT 1+1 as test1', function(err, rows) {\n  //\n});\n```\n\nPrepared statement and parameters:\n\n```js\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({ user: 'test', database: 'test'});\n\nconnection.execute('SELECT 1+? as test1', [10], function(err, rows) {\n  //\n});\n```\n\nConnecting over encrypted connection:\n\n```js\nvar fs         = require('fs');\nvar mysql      = require('mysql2');\nvar connection = mysql.createConnection({\n   user: 'test',\n   database: 'test',\n   ssl: {\n     key: fs.readFileSync('./certs/client-key.pem'),\n     cert: fs.readFileSync('./certs/client-cert.pem')\n   }\n});\nconnection.query('SELECT 1+1 as test1', console.log);\n```\n\nConnecting using custom stream:\n\n```js\nvar net        = require('net');\nvar mysql      = require('mysql2');\nvar shape      = require('shaper');\nvar connection = mysql.createConnection({\n   user: 'test',\n   database: 'test',\n   stream: net.connect('/tmp/mysql.sock').pipe(shape(10)) // emulate 10 bytes/sec link\n});\nconnection.query('SELECT 1+1 as test1', console.log);\n```\n\nSimple mysql proxy server:\n\n```js\nvar mysql = require('mysql2');\n\nvar server = mysql.createServer();\nserver.listen(3307);\nserver.on('connection', function(conn) {\n  console.log('connection');\n\n  conn.serverHandshake({\n    protocolVersion: 10,\n    serverVersion: 'node.js rocks',\n    connectionId: 1234,\n    statusFlags: 2,\n    characterSet: 8,\n    capabilityFlags: 0xffffff\n  });\n\n  conn.on('field_list', function(table, fields) {\n    console.log('field list:', table, fields);\n    conn.writeEof();\n  });\n\n  var remote = mysql.createConnection({user: 'root', database: 'dbname', host:'server.example.com', password: 'secret'});\n\n  conn.on('query', function(sql) {\n    console.log('proxying query:' + sql);\n    remote.query(sql, function(err) { // overloaded args, either (err, result :object)\n                                      // or (err, rows :array, columns :array)\n      if (Array.isArray(arguments[1])) {\n        // response to a 'select', 'show' or similar\n        var rows = arguments[1], columns = arguments[2];\n        console.log('rows', rows);\n        console.log('columns', columns);\n        conn.writeTextResult(rows, columns);\n      } else {\n        // response to an 'insert', 'update' or 'delete'\n        var result = arguments[1];\n        console.log('result', result);\n        conn.writeOk(result);\n      }\n    });\n  });\n\n  conn.on('end', remote.end.bind(remote));\n});\n```\n## MySQL Server API\n\n### Server\n\n  *  **createServer()** - creates server instance\n  *  **Server.listen**  - listen port / unix socket (same arguments as [net.Server.listen](http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback))\n\nevents:\n\n  *  **connect** - new incoming connection.\n\n### Connection\n\n  *  **serverHandshake({serverVersion, protocolVersion, connectionId, statusFlags, characterSet, capabilityFlags})** - send server handshake initialisation packet, wait handshake response and start listening for commands\n  *  **writeOk({affectedRows: num, insertId: num})** - send [OK packet](http://dev.mysql.com/doc/internals/en/overview.html#packet-OK_Packet) to client\n  *  **writeEof(warnings, statusFlags)** - send EOF packet\n  *  **writeTextResult(rows, fields)** - write query result to client. Rows and fields are in the same format as in `connection.query` callback.\n  *  **writeColumns(fields)** - write fields + EOF packets.\n  *  **writeTextRow(row)**  - write array (not hash!) ov values as result row\n  *  TODO: binary protocol\n\nevents:\n\n   *  **query(sql)** - query from client\n\n\n## License\n\n MIT\n\n## Acknowledgements\n\n  - Internal protocol is written from scratch using my experience with [mysql-native](https://github.com/sidorares/nodejs-mysql-native)\n  - constants, sql parameters interpolation, pool, connection config class taken from [node-mysql](https://github.com/felixge/node-mysql) (I tried to preserve git history)\n  - SSL upgrade code based on @TooTallNate [code](https://gist.github.com/TooTallNate/848444)\n  - Secure connection / compressed connection api flags compatible to [mariasql](https://github.com/mscdex/node-mariasql/) client.\n  - [contributors](https://github.com/sidorares/node-mysql2/graphs/contributors)\n\n## Benchmarks\n  - see [node-mysql-benchmarks](https://github.com/mscdex/node-mysql-benchmarks)\n  - try to run example [benchmarks](https://github.com/sidorares/node-mysql2/tree/master/benchmarks) on your system\n\n\n## Contributing\n\nFeel free to create pull requests.\nTODO in order of importance:\n\n  - node-mysql api incompatibility fixes\n  - documentation\n  - tests\n  - benchmarks\n  - bug fixes\n  - TODOs in source code\n  - performance improvements\n  - features\n\n## Features TODO\n  - more server side commands support (binary protocol, etc)\n  - named parameters interpolarion into unnamed parameters translation for prepared statements\n  - mysql-postgres bridge example\n  - mysql-mongo bridge example using js-based sql parser\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sidorares/node-mysql2/issues"
  },
  "_id": "mysql2@0.8.21",
  "dist": {
    "shasum": "56970f03c3e85675be75d2321ce9b01bb012010c"
  },
  "_from": "mysql2@",
  "_resolved": "https://registry.npmjs.org/mysql2/-/mysql2-0.8.21.tgz"
}
